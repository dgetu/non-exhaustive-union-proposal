{"version":3,"file":"nonExhaustiveHelperType.js","sourceRoot":"","sources":["../src/nonExhaustiveHelperType.ts"],"names":[],"mappings":";AAoCA,qBAAqB;AACrB,SAAS,WAAW,CAAC,QAAkB;IACrC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACxB,CAAC;AACD,2BAA2B;AAC3B,WAAW,CAAC,MAAM,CAAC,CAAC;AAEpB,YAAY;AACZ,SAAS,WAAW;IAClB,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,QAAQ,GAAG,WAAW,EAAE,CAAC;AAE/B,iBAAiB;AACjB,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;IACvB,MAAM,CAAC,GAAG,QAAQ,CAAC;IACnB,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACzB,CAAC;KAAM,CAAC;IACN,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACxB,CAAC","sourcesContent":["/**\n * Represents a primitive JavaScript type string, number, bigint and symbol.\n */\ntype Primitive<T> = T extends string\n  ? string\n  : T extends number\n    ? number\n    : T extends bigint\n      ? bigint\n      : T extends symbol\n        ? symbol\n        : unknown;\n\n/**\n * This is a unique symbol that we declare. This symbol is used as a property key in our\n * $NonExhaustive type. The use of a unique symbol guarantees that this property won't conflict with\n * any other string-named properties that might exist.\n */\ndeclare const __non_exhaustive: unique symbol;\n/**\n * This is a mapped type that represents an object with a single optional property. The property key\n * is the __non_exhaustive symbol we declared earlier, and the property value is of type never.\n */\ntype $NonExhaustive = { [__non_exhaustive]?: never };\n/**\n * This is the main type we will use to define our extensible enums. It is a union of T and a type\n * intersection of Primitive<T> and $NonExhaustive. This effectively means that the type can be any\n * value of T or any other value that matches the primitive type of T. The intersection with\n * $NonExhaustive is what prevents TypeScript from collapsing the union with string into just\n * string.\n */\ntype NonExhaustive<T> = T | (Primitive<T> & $NonExhaustive);\n\n// Type definition\ntype Position = NonExhaustive<\"one\" | \"two\" | \"three\">;\n\n// Function Parameter\nfunction setPosition(position: Position): void {\n  console.log(position);\n}\n// Autocomplete + any value\nsetPosition(\"two!\");\n\n// As Output\nfunction getPosition(): Position {\n  return \"one\";\n}\n\nconst position = getPosition();\n\n// Type narrowing\nif (position === \"one\") {\n  const x = position;\n  console.log(\"Got one\");\n} else {\n  console.log(position);\n}\n"]}