{"version":3,"file":"extensibleUnion.js","sourceRoot":"","sources":["../../src/util/extensibleUnion.ts"],"names":[],"mappings":"AASA,SAAS,SAAS,CAAC,KAAY;IAC7B,OAAO,KAAK,CAAC;AACf,CAAC;AAED,uBAAuB;AACvB,MAAM,UAAU,GAAU,KAAK,CAAC;AAChC,uCAAuC;AACvC,MAAM,YAAY,GAAU,OAAgB,CAAC;AAC7C,MAAM,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;AAE1C,IAAI,WAAW,KAAK,KAAK,EAAE,CAAC;IAC1B,wBAAwB;IACxB,MAAM,GAAG,GAAU,WAAW,CAAC;AACjC,CAAC;KAAM,CAAC;IACN,sFAAsF;IACtF,4BAA4B;IAC5B,mBAAmB;IACnB,MAAM,SAAS,GAAW,WAAW,CAAC;IACtC,IAAI,WAAW,KAAK,MAAM,EAAE,CAAC;QAC3B,sDAAsD;QACtD,MAAM,IAAI,GAAW,WAAW,CAAC;IACnC,CAAC;SAAM,CAAC;QACN,wEAAwE;QACxE,4BAA4B;QAC5B,mBAAmB;QACnB,MAAM,aAAa,GAAW,WAAW,CAAC;QAC1C,IAAK,WAAiC,KAAK,OAAO,EAAE,CAAC;YACnD,MAAM,KAAK,GAAY,WAAiC,CAAC;QAC3D,CAAC;QACD,MAAM,OAAO,GAAW,WAAgC,CAAC;IAC3D,CAAC;AACH,CAAC","sourcesContent":["declare const Unknown: unique symbol;\ntype UnknownVariant<Default> = Default extends object ? UnknownObject<Default> : typeof Unknown;\ntype UnknownObject<Default extends object> = {\n  [K in keyof Default]: UnknownVariant<Default[K]>;\n};\nexport type Extensible<T, Default> = T | UnknownVariant<Default>;\n\nexport type Color = Extensible<\"red\" | \"blue\", string>;\n\nfunction operation(color: Color) {\n  return color;\n}\n\n// Completions are good\nconst knownColor: Color = \"red\";\n// Unknown variants require a type cast\nconst unknownColor: Color = \"green\" as Color;\nconst outputColor = operation(knownColor);\n\nif (outputColor === \"red\") {\n  // No type cast required\n  const red: \"red\" = outputColor;\n} else {\n  // Good behavior - the contextual type here wouldn't break if a new variant were added\n  // Error message is not good\n  // @ts-expect-error\n  const maybeBlue: \"blue\" = outputColor;\n  if (outputColor === \"blue\") {\n    // Good behavior - contextual typing works as expected\n    const blue: \"blue\" = outputColor;\n  } else {\n    // Bad behavior - requires a type cast when consuming an unknown variant\n    // Error message is not good\n    // @ts-expect-error\n    const spuriousError: string = outputColor;\n    if ((outputColor as unknown as string) === \"green\") {\n      const green: \"green\" = outputColor as unknown as \"green\";\n    }\n    const unknown: string = outputColor as unknown as string;\n  }\n}\n"]}